{
  "api/MyApi.Controllers.ItemsController.html": {
    "href": "api/MyApi.Controllers.ItemsController.html",
    "title": "Class ItemsController | mysite",
    "keywords": "Class ItemsController Namespace MyApi.Controllers Assembly MyApi.dll [ApiController] [Route(\"[controller]\")] public class ItemsController : ControllerBase Inheritance object ControllerBase ItemsController Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ItemsController(MyDbContext) public ItemsController(MyDbContext context) Parameters context MyDbContext Methods Delete(int) Deletes an item by ID. [HttpDelete(\"{id}\")] public Task<IActionResult> Delete(int id) Parameters id int The ID of the item to delete. Returns Task<IActionResult> An IActionResult. Get() Gets all items. [HttpGet] public Task<IEnumerable<Item>> Get() Returns Task<IEnumerable<Item>> A list of items. Get(int) Gets an item by ID. [HttpGet(\"{id}\")] public Task<ActionResult<Item>> Get(int id) Parameters id int The ID of the item. Returns Task<ActionResult<Item>> The item with the specified ID. Post(Item) Creates a new item. [HttpPost] public Task<ActionResult<Item>> Post(Item item) Parameters item Item The item to create. Returns Task<ActionResult<Item>> The created item. Put(int, Item) Updates an item. [HttpPut(\"{id}\")] public Task<IActionResult> Put(int id, Item item) Parameters id int The ID of the item to update. item Item The updated item. Returns Task<IActionResult> An IActionResult."
  },
  "api/MyApi.Controllers.html": {
    "href": "api/MyApi.Controllers.html",
    "title": "Namespace MyApi.Controllers | mysite",
    "keywords": "Namespace MyApi.Controllers Classes ItemsController"
  },
  "api/MyApi.Data.MyDbContext.html": {
    "href": "api/MyApi.Data.MyDbContext.html",
    "title": "Class MyDbContext | mysite",
    "keywords": "Class MyDbContext Namespace MyApi.Data Assembly MyApi.dll public class MyDbContext : DbContext, IInfrastructure<IServiceProvider>, IDbContextDependencies, IDbSetCache, IDbContextPoolable, IResettableService, IDisposable, IAsyncDisposable Inheritance object DbContext MyDbContext Implements IInfrastructure<IServiceProvider> IDbContextDependencies IDbSetCache IDbContextPoolable IResettableService IDisposable IAsyncDisposable Inherited Members DbContext.Set<TEntity>() DbContext.Set<TEntity>(string) DbContext.OnConfiguring(DbContextOptionsBuilder) DbContext.ConfigureConventions(ModelConfigurationBuilder) DbContext.OnModelCreating(ModelBuilder) DbContext.SaveChanges() DbContext.SaveChanges(bool) DbContext.SaveChangesAsync(CancellationToken) DbContext.SaveChangesAsync(bool, CancellationToken) DbContext.Dispose() DbContext.DisposeAsync() DbContext.Entry<TEntity>(TEntity) DbContext.Entry(object) DbContext.Add<TEntity>(TEntity) DbContext.AddAsync<TEntity>(TEntity, CancellationToken) DbContext.Attach<TEntity>(TEntity) DbContext.Update<TEntity>(TEntity) DbContext.Remove<TEntity>(TEntity) DbContext.Add(object) DbContext.AddAsync(object, CancellationToken) DbContext.Attach(object) DbContext.Update(object) DbContext.Remove(object) DbContext.AddRange(params object[]) DbContext.AddRangeAsync(params object[]) DbContext.AttachRange(params object[]) DbContext.UpdateRange(params object[]) DbContext.RemoveRange(params object[]) DbContext.AddRange(IEnumerable<object>) DbContext.AddRangeAsync(IEnumerable<object>, CancellationToken) DbContext.AttachRange(IEnumerable<object>) DbContext.UpdateRange(IEnumerable<object>) DbContext.RemoveRange(IEnumerable<object>) DbContext.Find(Type, params object[]) DbContext.FindAsync(Type, params object[]) DbContext.FindAsync(Type, object[], CancellationToken) DbContext.Find<TEntity>(params object[]) DbContext.FindAsync<TEntity>(params object[]) DbContext.FindAsync<TEntity>(object[], CancellationToken) DbContext.FromExpression<TResult>(Expression<Func<IQueryable<TResult>>>) DbContext.Database DbContext.ChangeTracker DbContext.Model DbContext.ContextId DbContext.SavingChanges DbContext.SavedChanges DbContext.SaveChangesFailed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MyDbContext(DbContextOptions<MyDbContext>) public MyDbContext(DbContextOptions<MyDbContext> options) Parameters options DbContextOptions<MyDbContext> Properties Items public DbSet<Item> Items { get; set; } Property Value DbSet<Item>"
  },
  "api/MyApi.Data.html": {
    "href": "api/MyApi.Data.html",
    "title": "Namespace MyApi.Data | mysite",
    "keywords": "Namespace MyApi.Data Classes MyDbContext"
  },
  "api/MyApi.Helpers.Utilities.html": {
    "href": "api/MyApi.Helpers.Utilities.html",
    "title": "Class Utilities | mysite",
    "keywords": "Class Utilities Namespace MyApi.Helpers Assembly MyApi.dll Summary description for Utilities public class Utilities Inheritance object Utilities Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Utilities(IHttpContextAccessor) public Utilities(IHttpContextAccessor httpContextAccessor) Parameters httpContextAccessor IHttpContextAccessor Methods ConvertUTF8toBIG5(string) public static string ConvertUTF8toBIG5(string strInput) Parameters strInput string Returns string GetClientIpAddress() 取得用戶端 IP public string GetClientIpAddress() Returns string GetDayHtmlSelect(string) bmk日期格式轉換(20081008-->2008年10月8日) public static string GetDayHtmlSelect(string inputstring) Parameters inputstring string Returns string GetTimeHtmlSelect(string) bmk時間格式轉換(1230-->12點30分) public static string GetTimeHtmlSelect(string inputstring) Parameters inputstring string Returns string IsValidEmail(string) public static bool IsValidEmail(string strIn) Parameters strIn string Returns bool TimeConvertString(int) public static string TimeConvertString(int time) Parameters time int Returns string TimeFormat(string) bmk將時間字串-->數字型態(830-->0830) public static string TimeFormat(string time) Parameters time string Returns string TransNumToChinese(int) 將數字週數轉中文 public static string TransNumToChinese(int num) Parameters num int Returns string TransNumWeekToString(int) 將數字週數轉中文 public static string TransNumWeekToString(int week) Parameters week int Returns string TransString2Date(string) bmk日期格式轉換(20170118-->2017/01/18) public static string TransString2Date(string inputstring) Parameters inputstring string Returns string TransString2Date_all(string) bmk日期格式轉換(20170118-->2017/01/18) public static string TransString2Date_all(string inputstring) Parameters inputstring string Returns string TransTimeString2Double(string) bmk將時間字串-->數字型態(0830-->8.5) public static double TransTimeString2Double(string timestring) Parameters timestring string Returns double"
  },
  "api/MyApi.Helpers.html": {
    "href": "api/MyApi.Helpers.html",
    "title": "Namespace MyApi.Helpers | mysite",
    "keywords": "Namespace MyApi.Helpers Classes Utilities Summary description for Utilities"
  },
  "api/MyApi.Models.Item.html": {
    "href": "api/MyApi.Models.Item.html",
    "title": "Class Item | mysite",
    "keywords": "Class Item Namespace MyApi.Models Assembly MyApi.dll public class Item Inheritance object Item Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Id public int Id { get; set; } Property Value int Name public string? Name { get; set; } Property Value string Methods CreateSampleItems() Creates a list of sample items. public static List<Item> CreateSampleItems() Returns List<Item> A list of sample items. IsValid() Checks if the item is valid based on certain criteria. public bool IsValid() Returns bool True if the item is valid; otherwise, false. ToString() Returns a formatted string representation of the item. public override string ToString() Returns string A string representing the item. UpdateName(string) Updates the name of the item. public void UpdateName(string newName) Parameters newName string The new name for the item."
  },
  "api/MyApi.Models.html": {
    "href": "api/MyApi.Models.html",
    "title": "Namespace MyApi.Models | mysite",
    "keywords": "Namespace MyApi.Models Classes Item"
  },
  "docfx.html": {
    "href": "docfx.html",
    "title": "初始化 | mysite",
    "keywords": "dotnet tool update -g docfx 初始化 docfx init 產生 docfx.json docfx metadata 根據 docfx.json 產生靜態網站 docfx build 本地伺服器來即時預覽生成的文檔，預設端口為 8080。 # 本地伺服器來即時預覽生成的文檔，預設端口為 8080。 docfx docfx.json --serve --hostname 0.0.0.0 # 透過指定端口來啟動 DocFX 服務 docfx serve --port 8080 --hostname 0.0.0.0 # 啟用即時監控模式，會自動重新載入變更 docfx serve --watch --hostname 0.0.0.0 # 禁用快取 docfx serve --no-cache --hostname 0.0.0.0 # 指定來源目錄 docfx serve --source _site --hostname 0.0.0.0 參考 官方DOC [GitHub]https://github.com/dotnet/docfx"
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started | mysite",
    "keywords": "Getting Started Hi"
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction | mysite",
    "keywords": "Introduction Ian Test"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE. | mysite",
    "keywords": "This is the HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  }
}